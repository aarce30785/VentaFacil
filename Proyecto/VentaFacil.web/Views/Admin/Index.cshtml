@using VentaFacil.web.Models.Response.Admin
@using VentaFacil.web.Models.Dto
@using VentaFacil.web.Models.Response.Producto
@model UsuarioListResponse
@{
    ViewData["Title"] = "Panel de administrador";
    Layout = "_LayoutPlantilla";
    var productosResponse = ViewData["Productos"] as ListProductoResponse ?? new ListProductoResponse();
}

<!-- ========== table components start ========== -->
<section class="table-components">
    <div class="container-fluid">
        <!-- ========== title-wrapper start ========== -->
        <div class="title-wrapper pt-30">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="title">
                        <h2>Panel de Administrador</h2>
                    </div>
                </div>
                <!-- end col -->
                <div class="col-md-6">
                    <div class="breadcrumb-wrapper">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item">
                                    <a href="#0">Dashboard</a>
                                </li>
                                <li class="breadcrumb-item active" aria-current="page">
                                    Gestión
                                </li>
                            </ol>
                        </nav>
                    </div>
                </div>
                <!-- end col -->
            </div>
            <!-- end row -->
        </div>
        <!-- ========== title-wrapper end ========== -->
        <!-- ========== tabs section start ========== -->
        <div class="tables-wrapper">
            <div class="row">
                <div class="col-lg-12">
                    <div class="card-style mb-30">
                        <!-- Tabs Navigation -->
                        <ul class="nav nav-pills mb-4" id="adminTabs" role="tablist">
                            <li class="nav-item" role="presentation">
                                <button class="nav-link active" id="users-tab" data-bs-toggle="pill" data-bs-target="#users" type="button" role="tab" aria-controls="users" aria-selected="true">
                                    <i class="lni lni-users me-2"></i>Usuarios
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="products-tab" data-bs-toggle="pill" data-bs-target="#products" type="button" role="tab" aria-controls="products" aria-selected="false">
                                    <i class="lni lni-package me-2"></i>Productos
                                </button>
                            </li>
                            <li class="nav-item" role="presentation">
                                <button class="nav-link" id="categoria-tab" data-bs-toggle="pill" data-bs-target="#categoria" type="button" role="tab" aria-controls="categoria" aria-selected="false">
                                    <i class="lni lni-package me-2"></i>Categoria
                                </button>
                            </li>
                        </ul>

                        <!-- Tabs Content -->
                        <div class="tab-content" id="adminTabsContent">

                            <!-- Tab de Usuarios -->
                            <div class="tab-pane fade show active" id="users" role="tabpanel" aria-labelledby="users-tab">
        
                                <!-- Controles de Búsqueda y Filtros -->
                                <div class="row mb-4">
                                    <div class="col-md-8">
                                        <form method="get" asp-action="IndexUsuarios" class="row g-3" id="filtrosForm">
                                            <!-- Campo de búsqueda -->
                                            <div class="col-md-5">
                                                <div class="input-group">
                                                    <input type="text" name="busqueda" class="form-control" 
                                                           placeholder="Buscar por nombre o correo..." 
                                                           value="@Model.Busqueda" />
                                                </div>
                                            </div>

                                            <!-- Filtro por rol -->
                                            <div class="col-md-4">
                                                <select name="rolFiltro" class="form-select">
                                                    <option value="">Todos los roles</option>
                                                    @foreach (var rol in ViewBag.Roles)
                                                    {
                                                        <option value="@rol.Value" 
                                                                selected="@(Model.RolFiltro?.ToString() == rol.Value ? "selected" : null)">
                                                            @rol.Text
                                                        </option>
                                                    }
                                                </select>
                                            </div>

                                            <!-- Botones de acción -->
                                            <div class="col-md-3">
                                                <div class="btn-group w-100" role="group">
                                                    <button type="submit" class="btn btn-primary">
                                                        <i class="lni lni-search-alt"></i> Buscar
                                                    </button>
                                                    <a href="@Url.Action("LimpiarFiltros", "Admin")" class="btn btn-outline-secondary">
                                                        <i class="lni lni-close"></i>
                                                    </a>
                                                </div>
                                            </div>

                                            <!-- Campos ocultos para mantener otros parámetros -->
                                            <input type="hidden" name="pagina" value="1" />
                                            <input type="hidden" name="cantidadPorPagina" value="10" />
                                        </form>
                                    </div>

                                    <div class="col-md-4 text-end">
                                        <button type="button" class="main-btn primary-btn btn-hover" onclick="abrirModal('crear')">
                                            <i class="lni lni-plus"></i> Agregar Usuario
                                        </button>
                                    </div>
                                </div>

                                <!-- Mensaje cuando no hay resultados CON FILTROS APLICADOS -->
                                @if (Model.Usuarios != null && !Model.Usuarios.Any() && (!string.IsNullOrEmpty(Model.Busqueda) || Model.RolFiltro.HasValue))
                                {
                                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                                        <i class="lni lni-info-circle me-2"></i>
                                        <strong>No se encontraron usuarios</strong> que coincidan con los criterios de búsqueda.
                                        <a href="@Url.Action("LimpiarFiltros")" class="alert-link ms-2">Mostrar todos los usuarios</a>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                                <!-- Mensaje cuando no hay usuarios en absoluto -->
                                @if (Model.Usuarios != null && !Model.Usuarios.Any() && string.IsNullOrEmpty(Model.Busqueda) && !Model.RolFiltro.HasValue)
                                {
                                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                                        <i class="lni lni-info-circle me-2"></i>
                                        <strong>No hay usuarios registrados en el sistema.</strong>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                                <!-- Tabla de Usuarios -->
                                <div class="table-wrapper table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th class="lead-name"><h6>Nombre</h6></th>
                                                <th class="lead-email"><h6>Email</h6></th>
                                                <th class="lead-role"><h6>Rol</h6></th>
                                                <th><h6>Acción</h6></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Model.Usuarios != null && Model.Usuarios.Any())
                                            {
                                                foreach (var usuario in Model.Usuarios)
                                                {
                                                    <tr>
                                                        <td class="min-width">
                                                            <div class="lead">
                                                                <div class="lead-image">
                                                                    <img src="assets/images/lead/lead-1.png" alt="" />
                                                                </div>
                                                                <div class="lead-text">
                                                                    <p>@usuario.Nombre</p>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="min-width">
                                                            <div class="lead">
                                                                <div class="lead-image">
                                                                    <img src="assets/images/lead/lead-1.png" alt="" />
                                                                </div>
                                                                <div class="lead-text">
                                                                    <p>@usuario.Correo</p>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="min-width">
                                                            <span class="status-btn active-btn">@usuario.Rol</span>
                                                        </td>
                                                        <td>
                                                            <div class="action d-flex gap-2">
                                                                <!-- Ver -->
                                                                <a href="javascript:void(0);"
                                                                   onclick="abrirModal('ver', @usuario.Id_Usr)"
                                                                   class="text-primary" title="Ver">
                                                                    <i class="lni lni-eye"></i>
                                                                </a>

                                                                <!-- Editar -->
                                                                <a href="javascript:void(0);"
                                                                   onclick="abrirModal('editar', @usuario.Id_Usr)"
                                                                   class="text-warning" title="Editar">
                                                                    <i class="lni lni-pencil"></i>
                                                                </a>

                                                                <!-- Eliminar -->
                                                                <a class="text-danger" href="javascript:void(0);"
                                                                   onclick="confirmarEliminacion(@usuario.Id_Usr, '@usuario.Nombre.Replace("'", "\\'")')"
                                                                   title="Eliminar">
                                                                    <i class="lni lni-trash-can"></i>
                                                                </a>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else if (Model.Usuarios != null && !Model.Usuarios.Any())
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center py-4">
                                                        <div class="text-muted">
                                                            <i class="lni lni-users me-2"></i>
                                                            @if (!string.IsNullOrEmpty(Model.Busqueda) || Model.RolFiltro.HasValue)
                                                            {
                                                                <span>No se encontraron usuarios con los filtros aplicados</span>
                                                            }
                                                            else
                                                            {
                                                                <span>No hay usuarios registrados</span>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center py-4">
                                                        <div class="text-muted">
                                                            <i class="lni lni-warning me-2"></i>
                                                            Error al cargar los usuarios
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
        
                                <div id="modalContainer"></div>

                                <!-- Menú de Paginación -->
                                @if (Model.TotalPaginas > 1 && Model.Usuarios != null && Model.Usuarios.Any())
                                {
                                    <div class="pagination-wrapper mt-4">
                                        <nav aria-label="Page navigation">
                                            <ul class="pagination justify-content-center">
                                                <!-- Botón Anterior -->
                                                <li class="page-item @(Model.PaginaActual == 1 ? "disabled" : "")">
                                                    <a class="page-link" 
                                                       href="@Url.Action("IndexUsuarios", "Admin", new { 
                                                           pagina = Model.PaginaActual - 1, 
                                                           cantidadPorPagina = 10,
                                                           busqueda = Model.Busqueda,
                                                           rolFiltro = Model.RolFiltro
                                                       })"
                                                       tabindex="-1" aria-disabled="@(Model.PaginaActual == 1 ? "true" : "false")">
                                                        <i class="lni lni-chevron-left"></i>
                                                    </a>
                                                </li>

                                                <!-- Números de página -->
                                                @for (int i = 1; i <= Model.TotalPaginas; i++)
                                                {
                                                    <li class="page-item @(i == Model.PaginaActual ? "active" : "")">
                                                        <a class="page-link" 
                                                           href="@Url.Action("IndexUsuarios", "Admin", new { 
                                                               pagina = i, 
                                                               cantidadPorPagina = 10,
                                                               busqueda = Model.Busqueda,
                                                               rolFiltro = Model.RolFiltro
                                                           })">@i</a>
                                                    </li>
                                                }

                                                <!-- Botón Siguiente -->
                                                <li class="page-item @(Model.PaginaActual == Model.TotalPaginas ? "disabled" : "")">
                                                    <a class="page-link" 
                                                       href="@Url.Action("IndexUsuarios", "Admin", new { 
                                                           pagina = Model.PaginaActual + 1, 
                                                           cantidadPorPagina = 10,
                                                           busqueda = Model.Busqueda,
                                                           rolFiltro = Model.RolFiltro
                                                       })">
                                                        <i class="lni lni-chevron-right"></i>
                                                    </a>
                                                </li>
                                            </ul>
                                        </nav>

                                        <!-- Información de paginación -->
                                        <div class="pagination-info text-center mt-2">
                                            @{
                                                var inicio = (Model.PaginaActual - 1) * 10 + 1;
                                                var fin = Math.Min(Model.PaginaActual * 10, Model.TotalUsuarios);
                                            }
                    
                                            <p class="text-sm text-muted">
                                                Mostrando @inicio-@fin de @Model.TotalUsuarios registros
                        
                                                @if (!string.IsNullOrEmpty(Model.Busqueda) || Model.RolFiltro.HasValue)
                                                {
                                                    <span class="ms-2">
                                                        <a href="@Url.Action("LimpiarFiltros")" class="text-primary text-decoration-underline">
                                                            (Ver todos)
                                                        </a>
                                                    </span>
                                                }
                                            </p>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Tab de Productos -->
                            <div class="tab-pane fade" id="products" role="tabpanel" aria-labelledby="products-tab">
                                <!-- Controles de Búsqueda y Filtros -->
                                <div class="row mb-4">
                                    <div class="col-md-8">
                                        <form method="get" asp-action="IndexProductos" class="row g-3" id="filtrosProductosForm">
                                            <!-- Campo de búsqueda -->
                                            <div class="col-md-5">
                                                <div class="input-group">
                                                    <input type="text" name="busqueda" class="form-control" 
                                                           placeholder="Buscar por nombre o descripción..." 
                                                           value="@productosResponse.Busqueda" />
                                                </div>
                                            </div>

                                            <!-- Filtro por categoría -->
                                            <div class="col-md-4">
                                                <select name="categoriaFiltro" class="form-select">
                                                    <option value="">Todas las categorías</option>
                                                    @foreach (var categoria in productosResponse.Categorias ?? new List<SelectListItem>())
                                                    {
                                                        <option value="@categoria.Value"
                                                                selected="@(productosResponse.CategoriaFiltro?.ToString() == categoria.Value ? "selected" : null)">
                                                            @categoria.Text
                                                        </option>
                                                    }
                                                </select>
                                            </div>

                                            <!-- Botones de acción -->
                                            <div class="col-md-3">
                                                <div class="btn-group w-100" role="group">
                                                    <button type="submit" class="btn btn-primary">
                                                        <i class="lni lni-search-alt"></i> Buscar
                                                    </button>
                                                    <a href="@Url.Action("LimpiarFiltrosProductos", "Admin")" class="btn btn-outline-secondary">
                                                        <i class="lni lni-close"></i>
                                                    </a>
                                                </div>
                                            </div>

                                            <!-- Campos ocultos para mantener otros parámetros -->
                                            <input type="hidden" name="pagina" value="1" />
                                            <input type="hidden" name="cantidadPorPagina" value="10" />
                                        </form>
                                    </div>

                                    <div class="col-md-4 text-end">
                                        <button type="button" class="main-btn primary-btn btn-hover" onclick="abrirModalProducto('crear')">
                                            <i class="lni lni-plus"></i> Agregar Producto
                                        </button>
                                    </div>
                                </div>

                                <!-- Mensaje cuando no hay resultados CON FILTROS APLICADOS -->
                                @if (productosResponse.Productos != null && !productosResponse.Productos.Any() && (!string.IsNullOrEmpty(productosResponse.Busqueda) || productosResponse.CategoriaFiltro.HasValue))
                                {
                                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                                        <i class="lni lni-info-circle me-2"></i>
                                        <strong>No se encontraron productos</strong> que coincidan con los criterios de búsqueda.
                                        <a href="@Url.Action("LimpiarFiltrosProductos")" class="alert-link ms-2">Mostrar todos los productos</a>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                                <!-- Mensaje cuando no hay productos en absoluto -->
                                @if (productosResponse.Productos != null && !productosResponse.Productos.Any() && string.IsNullOrEmpty(productosResponse.Busqueda) && !productosResponse.CategoriaFiltro.HasValue)
                                {
                                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                                        <i class="lni lni-info-circle me-2"></i>
                                        <strong>No hay productos registrados en el sistema.</strong>
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                }

                                <!-- Tabla de Productos -->
                                <div class="table-wrapper table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th class="lead-name"><h6>Nombre</h6></th>
                                                <th class="lead-email"><h6>Descripción</h6></th>
                                                <th class="lead-role"><h6>Precio</h6></th>
                                                <th><h6>Stock Mínimo</h6></th>
                                                <th><h6>Estado</h6></th>
                                                <th><h6>Categoría</h6></th>
                                                <th><h6>Acciones</h6></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (productosResponse.Productos != null && productosResponse.Productos.Any())
                                            {
                                                foreach (var producto in productosResponse.Productos)
                                                {
                                                    <tr>
                                                        <td class="min-width">
                                                            <div class="lead">
                                                                <div class="lead-image">
                                                                    <img src="assets/images/lead/lead-1.png" alt="" />
                                                                </div>
                                                                <div class="lead-text">
                                                                    <p>@producto.Nombre</p>
                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="min-width">
                                                            <div class="lead-text">
                                                                <p title="@producto.Descripcion">
                                                                    @(producto.Descripcion?.Length > 50 ? producto.Descripcion.Substring(0, 50) + "..." : producto.Descripcion)
                                                                </p>
                                                            </div>
                                                        </td>
                                                        <td class="min-width">
                                                            <span class="status-btn success-btn">@producto.Precio.ToString("C")</span>
                                                        </td>
                                                        <td class="min-width">
                                                            <span class="status-btn info-btn">@producto.StockMinimo</span>
                                                        </td>
                                                        <td class="min-width">
                                                            <span class="status-btn @(producto.Estado ? "active-btn" : "inactive-btn")">
                                                                @(producto.Estado ? "Activo" : "Inactivo")
                                                            </span>
                                                        </td>
                                                        <td class="min-width">
                                                            <span class="status-btn warning-btn">
                                                                @(productosResponse.Categorias?.FirstOrDefault(c => c.Value == producto.Id_Categoria.ToString())?.Text ?? "N/A")
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <div class="action d-flex gap-2">
                                                                <!-- Ver -->
                                                                <a href="javascript:void(0);"
                                                                   onclick="abrirModalProducto('ver', @producto.Id_Producto)"
                                                                   class="text-primary" title="Ver">
                                                                    <i class="lni lni-eye"></i>
                                                                </a>

                                                                <!-- Editar -->
                                                                <a href="javascript:void(0);"
                                                                   onclick="abrirModalProducto('editar', @producto.Id_Producto)"
                                                                   class="text-warning" title="Editar">
                                                                    <i class="lni lni-pencil"></i>
                                                                </a>

                                                                <!-- Eliminar -->
                                                                <a class="text-danger" href="javascript:void(0);"
                                                                   onclick="confirmarEliminacionProducto(@producto.Id_Producto, '@producto.Nombre.Replace("'", "\\'")')"
                                                                   title="Eliminar">
                                                                    <i class="lni lni-trash-can"></i>
                                                                </a>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else if (productosResponse.Productos != null && !productosResponse.Productos.Any())
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center py-4">
                                                        <div class="text-muted">
                                                            <i class="lni lni-package me-2"></i>
                                                            @if (!string.IsNullOrEmpty(productosResponse.Busqueda) || productosResponse.CategoriaFiltro.HasValue)
                                                            {
                                                                <span>No se encontraron productos con los filtros aplicados</span>
                                                            }
                                                            else
                                                            {
                                                                <span>No hay productos registrados</span>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center py-4">
                                                        <div class="text-muted">
                                                            <i class="lni lni-warning me-2"></i>
                                                            Error al cargar los productos
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <div id="modalContainerProductos"></div>

                                <!-- Menú de Paginación -->
                                @if (productosResponse.TotalPaginas > 1 && productosResponse.Productos != null && productosResponse.Productos.Any())
                                {
                                    <div class="pagination-wrapper mt-4">
                                        <nav aria-label="Page navigation">
                                            <ul class="pagination justify-content-center">
                                                <!-- Botón Anterior -->
                                                <li class="page-item @(productosResponse.PaginaActual == 1 ? "disabled" : "")">
                                                    <a class="page-link" 
                                                       href="@Url.Action("IndexProductos", "Admin", new { 
                                                           pagina = productosResponse.PaginaActual - 1, 
                                                           cantidadPorPagina = 10,
                                                           busqueda = productosResponse.Busqueda,
                                                           categoriaFiltro = productosResponse.CategoriaFiltro
                                                       })"
                                                       tabindex="-1" aria-disabled="@(productosResponse.PaginaActual == 1 ? "true" : "false")">
                                                        <i class="lni lni-chevron-left"></i>
                                                    </a>
                                                </li>

                                                <!-- Números de página -->
                                                @for (int i = 1; i <= productosResponse.TotalPaginas; i++)
                                                {
                                                    <li class="page-item @(i == productosResponse.PaginaActual ? "active" : "")">
                                                        <a class="page-link" 
                                                           href="@Url.Action("IndexProductos", "Admin", new { 
                                                               pagina = i, 
                                                               cantidadPorPagina = 10,
                                                               busqueda = productosResponse.Busqueda,
                                                               categoriaFiltro = productosResponse.CategoriaFiltro
                                                           })">@i</a>
                                                    </li>
                                                }

                                                <!-- Botón Siguiente -->
                                                <li class="page-item @(productosResponse.PaginaActual == productosResponse.TotalPaginas ? "disabled" : "")">
                                                    <a class="page-link" 
                                                       href="@Url.Action("IndexProductos", "Admin", new { 
                                                           pagina = productosResponse.PaginaActual + 1, 
                                                           cantidadPorPagina = 10,
                                                           busqueda = productosResponse.Busqueda,
                                                           categoriaFiltro = productosResponse.CategoriaFiltro
                                                       })">
                                                        <i class="lni lni-chevron-right"></i>
                                                    </a>
                                                </li>
                                            </ul>
                                        </nav>

                                        <!-- Información de paginación -->
                                        <div class="pagination-info text-center mt-2">
                                            @{
                                                var inicio = (productosResponse.PaginaActual - 1) * 10 + 1;
                                                var fin = Math.Min(productosResponse.PaginaActual * 10, productosResponse.TotalProductos);
                                            }
                    
                                            <p class="text-sm text-muted">
                                                Mostrando @inicio-@fin de @productosResponse.TotalProductos registros
                        
                                                @if (!string.IsNullOrEmpty(productosResponse.Busqueda) || productosResponse.CategoriaFiltro.HasValue)
                                                {
                                                    <span class="ms-2">
                                                        <a href="@Url.Action("LimpiarFiltrosProductos")" class="text-primary text-decoration-underline">
                                                            (Ver todos)
                                                        </a>
                                                    </span>
                                                }
                                            </p>
                                        </div>
                                    </div>
                                }
                            </div>

                            <!-- Tab de Categorías (placeholder) -->
                            <div class="tab-pane fade" id="categoria" role="tabpanel" aria-labelledby="categoria-tab">
                                <div class="text-center py-5">
                                    <i class="lni lni-package text-muted" style="font-size: 3rem;"></i>
                                    <h4 class="mt-3 text-muted">Gestión de Categorías</h4>
                                    <p class="text-muted">Esta funcionalidad estará disponible próximamente.</p>
                                </div>
                            </div>
                        </div>
                        </div>

                        </div> <!-- end card -->
                </div> <!-- end col -->
            </div> <!-- end row -->
        </div> <!-- ========== tabs section end ========== -->
    </div> <!-- end container -->
</section>

@section Scripts {
    <script>
        
// ========== FUNCIONALIDAD PARA USUARIOS ==========
        
        // Auto-submit del filtro de rol cuando cambia
        document.querySelector('select[name="rolFiltro"]')?.addEventListener('change', function() {
            document.getElementById('filtrosForm').submit();
        });

        // Manejar el evento de enter en el campo de búsqueda
        document.querySelector('input[name="busqueda"]')?.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('filtrosForm').submit();
            }
        });

        // Función para abrir el modal
        function abrirModal(accion, usuarioId = null) {
            console.log('Abriendo modal:', accion, 'Usuario ID:', usuarioId);
    
            let url = '';
            const params = new URLSearchParams();

            // Agregar parámetros básicos
            params.append('accion', accion);
    
            if (usuarioId) {
                params.append('usuarioId', usuarioId);
            }

            // Mantener filtros
            const busqueda = '@Html.Raw(Model.Busqueda ?? "")';
            const rolFiltro = '@(Model.RolFiltro?.ToString() ?? "")';
            const pagina = '@Model.PaginaActual';

            if (busqueda) params.append('busqueda', busqueda);
            if (rolFiltro) params.append('rolFiltro', rolFiltro);
            if (pagina) params.append('pagina', pagina);

            url = '@Url.Action("ObtenerModalUsuario", "Admin")' + '?' + params.toString();
            console.log('URL del modal:', url);

            // Cargar modal via AJAX
            fetch(url)
                .then(response => {
                    if (!response.ok) throw new Error('Error al cargar el modal: ' + response.status);
                    return response.text();
                })
                .then(data => {
                    document.getElementById('modalContainer').innerHTML = data;
                    const modalElement = document.getElementById('usuarioModal');
            
                    if (!modalElement) {
                        console.error('Modal element no encontrado después de cargar');
                        return;
                    }
            
                    const modal = new bootstrap.Modal(modalElement);
            
                    // Configurar el evento cuando el modal se muestra completamente
                    modalElement.addEventListener('shown.bs.modal', function () {
                        console.log('Modal mostrado, configurando submit para:', accion);
                        configurarSubmitForm(accion);
                    });
            
                    modal.show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error al cargar el formulario: ' + error.message);
                });
        }
        
       function configurarSubmitForm(accion) {
        const form = document.getElementById('usuarioForm');
    
        if (!form) {
            console.error('Formulario no encontrado en configurarSubmitForm');
            return;
        }

        console.log('Configurando submit para acción:', accion, 'Form:', form);

        // Remover event listeners previos para evitar duplicados
        const newForm = form.cloneNode(true);
        form.parentNode.replaceChild(newForm, form);

        newForm.addEventListener('submit', function(e) {
            e.preventDefault();
            e.stopPropagation();

            console.log('Submit del formulario para acción:', accion);

            // Limpiar errores previos
            limpiarErrores();

            // Validación manual del frontend
            let isValid = true;

            const contrasena = document.getElementById('Contrasena')?.value || '';
            const confirmar = document.getElementById('ConfirmarContrasena')?.value || '';

            if (accion === 'crear') {
                if (!contrasena || contrasena.length < 6) {
                    mostrarError('Contrasena', 'La contraseña es requerida y debe tener al menos 6 caracteres');
                    isValid = false;
                } else if (contrasena !== confirmar) {
                    mostrarError('ConfirmarContrasena', 'Las contraseñas no coinciden');
                    isValid = false;
                }
            }

            if (accion === 'editar') {
                if (contrasena || confirmar) {
                    if (!contrasena || !confirmar) {
                        mostrarError('Contrasena', 'Debe completar ambos campos de contraseña si desea cambiarla');
                        isValid = false;
                    } else if (contrasena.length < 6) {
                        mostrarError('Contrasena', 'La contraseña debe tener al menos 6 caracteres');
                        isValid = false;
                    } else if (contrasena !== confirmar) {
                        mostrarError('ConfirmarContrasena', 'Las contraseñas no coinciden');
                        isValid = false;
                    }
                }
            }

            if (!isValid) {
                console.log('Validación frontend fallida');
                return false;
            }

            // Crear FormData directamente desde el formulario
            const formData = new FormData(newForm);

            // Debug: mostrar datos que se enviarán
            console.log('Datos a enviar:');
            for (let [key, value] of formData.entries()) {
                console.log(key + ': ' + value);
            }

            // Enviar la solicitud
            const url = '@Url.Action("GuardarUsuario", "Admin")';
            console.log('Enviando a:', url);

            fetch(url, {
                method: 'POST',
                body: formData // FormData establece automáticamente los headers correctos
            })
            .then(response => {
                console.log('Respuesta HTTP - Status:', response.status, 'OK:', response.ok);
    
                return response.text().then(text => {
                    console.log('Respuesta completa recibida:', text);
    
                    try {
                        // Intentar parsear como JSON
                        const jsonData = JSON.parse(text);
                        console.log('Parseado como JSON exitosamente:', jsonData);
                        return jsonData;
                    } catch (e) {
                        console.log('No es JSON válido, manejando como texto/HTML');
                    
                        if (response.status === 400) {
                            return {
                                success: false,
                                message: 'Error de validación en el servidor',
                                errors: ['Por favor verifique que todos los campos sean correctos'],
                                fieldErrors: {}
                            };
                        }
                    
                        if (!response.ok) {
                            return {
                                success: false,
                                message: `Error del servidor: ${response.status}`,
                                errors: [text.substring(0, 200)],
                                fieldErrors: {}
                            };
                        }
                    
                        return {
                            success: false,
                            message: 'Respuesta inesperada del servidor',
                            errors: [text],
                            fieldErrors: {}
                        };
                    }
                });
            })
            .then(result => {
                if (!result) return;

                console.log('Resultado procesado:', result);

                if (result.success) {
                    mostrarMensajeExito(result.message);
                
                    setTimeout(() => {
                        const modal = bootstrap.Modal.getInstance(document.getElementById('usuarioModal'));
                        if (modal) modal.hide();
                        window.location.reload();
                    }, 1500);
                } else {
                    console.log('Mostrando errores:', result.errors, result.fieldErrors);
                    if (result.errors || result.fieldErrors) {
                        mostrarErroresEnFormulario(result.errors || [], result.fieldErrors || null);
                    } else {
                        mostrarErrorGeneral(result.message || 'Error desconocido');
                    }
                }
            })
            .catch(err => {
                console.error('Error en fetch:', err);
                mostrarErrorGeneral('Error de conexión: ' + err.message);
            });
        });
    }

        function mostrarErroresEnFormulario(errors, fieldErrors = null) {
            console.log('Mostrando errores:', errors, fieldErrors);
            
            // Limpiar errores previos primero
            limpiarErrores();
            
            // PRIMERO usar fieldErrors si están disponibles (mapeo preciso)
            if (fieldErrors) {
                console.log('Procesando fieldErrors:', fieldErrors);
                Object.keys(fieldErrors).forEach(field => {
                    const errorMessage = fieldErrors[field];
                    console.log(`Error en campo ${field}:`, errorMessage);
                    mostrarError(field, errorMessage);
                });
            }
            
            // LUEGO procesar la lista general de errores
            if (errors && errors.length > 0) {
                console.log('Procesando errors generales:', errors);
                errors.forEach(error => {
                    // Verificar si este error ya fue manejado por fieldErrors
                    const alreadyHandled = fieldErrors && Object.values(fieldErrors).includes(error);
                    if (!alreadyHandled) {
                        let fieldName = determinarCampoPorError(error);
                        console.log(`Error general "${error}" mapeado a campo:`, fieldName);
                        if (fieldName) {
                            mostrarError(fieldName, error);
                        } else {
                            mostrarErrorGeneral(error);
                        }
                    }
                });
            }
        }

        // Función para determinar campo por error
        function determinarCampoPorError(error) {
            const errorLower = error.toLowerCase();
            console.log('Determinando campo para error:', errorLower);
            
            if (errorLower.includes('nombre') || errorLower.includes('name') || errorLower.includes('el nombre')) {
                return 'Nombre';
            } else if (errorLower.includes('correo') || errorLower.includes('email')) {
                return 'Correo';
            } else if (errorLower.includes('contraseña') || errorLower.includes('contrasena') || errorLower.includes('password')) {
                return 'Contrasena';
            } else if (errorLower.includes('confirmar') || errorLower.includes('confirm')) {
                return 'ConfirmarContrasena';
            } else if (errorLower.includes('rol') || errorLower.includes('role')) {
                return 'Rol';
            }
            
            return null;
        }

        // Función para mostrar error en campo específico (SÓLO UNA VEZ)
        function mostrarError(campo, mensaje) {
            console.log(`Intentando mostrar error en campo ${campo}:`, mensaje);
            
            let input;
            
            // Buscar por name primero (es lo más específico)
            input = document.querySelector(`[name="${campo}"]`);
            console.log('Búsqueda por name:', input);
            
            // Si no se encuentra, buscar por id
            if (!input) {
                input = document.getElementById(campo);
                console.log('Búsqueda por id:', input);
            }
            
            // Si aún no se encuentra, intentar búsqueda case-insensitive
            if (!input) {
                const allInputs = document.querySelectorAll('input, select, textarea');
                input = Array.from(allInputs).find(el => 
                    el.name && el.name.toLowerCase() === campo.toLowerCase()
                );
                console.log('Búsqueda case-insensitive:', input);
            }
            
            if (input) {
                const formGroup = input.closest('.form-group');
                
                if (formGroup) {
                    // Remover error previo
                    const errorExistente = formGroup.querySelector('.text-danger.field-validation-error');
                    if (errorExistente) {
                        errorExistente.remove();
                    }
                    
                    // Agregar nuevo error
                    const errorElement = document.createElement('span');
                    errorElement.className = 'text-danger field-validation-error';
                    errorElement.style.display = 'block';
                    errorElement.style.marginTop = '5px';
                    errorElement.style.fontSize = '0.875rem';
                    errorElement.textContent = mensaje;
                    
                    input.classList.add('is-invalid');
                    formGroup.appendChild(errorElement);
                    
                    console.log(`Error mostrado en campo ${campo}`);
                }
            } else {
                console.error(`Campo no encontrado: ${campo}`);
                mostrarErrorGeneral(`Error en ${campo}: ${mensaje}`);
            }
        }

        // Función para mostrar error general
        function mostrarErrorGeneral(mensaje) {
            // Buscar o crear contenedor de error general
            let errorContainer = document.getElementById('errorGeneral');
            if (!errorContainer) {
                errorContainer = document.createElement('div');
                errorContainer.id = 'errorGeneral';
                errorContainer.className = 'alert alert-danger alert-dismissible fade show';
                errorContainer.innerHTML = `
                    <i class="lni lni-warning me-2"></i>
                    ${mensaje}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
        
                // Insertar después del título del modal
                const modalHeader = document.querySelector('.modal-header');
                if (modalHeader) {
                    modalHeader.parentNode.insertBefore(errorContainer, modalHeader.nextSibling);
                }
            } else {
                errorContainer.innerHTML = `
                    <i class="lni lni-warning me-2"></i>
                    ${mensaje}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                errorContainer.classList.remove('d-none');
            }
        }

        // Función para mostrar mensaje de éxito
        function mostrarMensajeExito(mensaje) {
            const successContainer = document.createElement('div');
            successContainer.className = 'alert alert-success alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3';
            successContainer.style.zIndex = '9999';
            successContainer.innerHTML = `
                <i class="lni lni-checkmark-circle me-2"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
    
            document.body.appendChild(successContainer);
    
            // Auto-remover después de 3 segundos
            setTimeout(() => {
                if (successContainer.parentNode) {
                    successContainer.parentNode.removeChild(successContainer);
                }
            }, 3000);
        }

        // Función para limpiar todos los errores
        function limpiarErrores() {
            console.log('Limpiando errores...');
            
            // Limpiar clases de error en inputs
            document.querySelectorAll('.is-invalid').forEach(input => {
                input.classList.remove('is-invalid');
            });
            
            // Remover elementos de error
            document.querySelectorAll('.field-validation-error').forEach(error => {
                error.remove();
            });
            
            // Limpiar error general
            const errorGeneral = document.getElementById('errorGeneral');
            if (errorGeneral) {
                errorGeneral.remove();
            }
        }

        // Función para confirmar eliminación
        function confirmarEliminacion(usuarioId, usuarioNombre) {
            // Obtener filtros actuales
            const busqueda = '@Html.Raw(Model.Busqueda)';
            const rolFiltro = '@Model.RolFiltro';
            const pagina = '@Model.PaginaActual';
        
            if (confirm(`¿Está seguro de que desea eliminar al usuario "${usuarioNombre}"?`)) {
                // Construir URL con parámetros de filtro
                let url = '@Url.Action("EliminarUsuario", "Admin")' + 
                         `?id=${usuarioId}` +
                         `&busqueda=${encodeURIComponent(busqueda)}` +
                         `&rolFiltro=${rolFiltro}` +
                         `&pagina=${pagina}`;
            
                window.location.href = url;
            }
        }

        // Cerrar modal y limpiar
        document.addEventListener('hidden.bs.modal', function (e) {
            if (e.target.id === 'usuarioModal') {
                document.getElementById('modalContainer').innerHTML = '';
            }
        });

        // ========== FUNCIONALIDAD PARA PRODUCTOS ==========
        // Auto-submit del filtro de categoría cuando cambia
        document.querySelector('select[name="categoriaFiltro"]')?.addEventListener('change', function() {
            filtrarProductosAJAX();
        });

        // Manejar el evento de enter en el campo de búsqueda de productos
        document.querySelector('#filtrosProductosForm input[name="busqueda"]')?.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                filtrarProductosAJAX();
            }
        });

        // Botón de búsqueda con AJAX
        document.querySelector('#filtrosProductosForm button[type="submit"]')?.addEventListener('click', function(e) {
            e.preventDefault();
            filtrarProductosAJAX();
        });

        // Función para abrir el modal de productos
        function abrirModalProducto(accion, productoId = null) {
            console.log('Abriendo modal producto:', accion, 'Producto ID:', productoId);
    
            let url = '';
            const params = new URLSearchParams();

            // Agregar parámetros básicos
            params.append('accion', accion);
    
            if (productoId) {
                params.append('productoId', productoId);
            }

            // Mantener filtros
            const busqueda = '@Html.Raw(productosResponse.Busqueda ?? "")';
            const categoriaFiltro = '@(productosResponse.CategoriaFiltro?.ToString() ?? "")';
            const pagina = '@productosResponse.PaginaActual';

            if (busqueda) params.append('busqueda', busqueda);
            if (categoriaFiltro) params.append('categoriaFiltro', categoriaFiltro);
            if (pagina) params.append('pagina', pagina);

            url = '@Url.Action("ObtenerModalProducto", "Admin")' + '?' + params.toString();
            console.log('URL del modal producto:', url);

            // Cargar modal via AJAX
            fetch(url)
                .then(response => {
                    if (!response.ok) throw new Error('Error al cargar el modal: ' + response.status);
                    return response.text();
                })
                .then(data => {
                    document.getElementById('modalContainerProductos').innerHTML = data;
                    const modalElement = document.getElementById('productoModal');
            
                    if (!modalElement) {
                        console.error('Modal element no encontrado después de cargar');
                        return;
                    }
            
                    const modal = new bootstrap.Modal(modalElement);
            
                    // Configurar el evento cuando el modal se muestra completamente
                    modalElement.addEventListener('shown.bs.modal', function () {
                        console.log('Modal producto mostrado, configurando submit para:', accion);
                        configurarSubmitFormProducto(accion);
                    });
            
                    modal.show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error al cargar el formulario: ' + error.message);
                });
        }

        // Función principal para filtrar productos via AJAX
        function filtrarProductosAJAX() {
            const form = document.getElementById('filtrosProductosForm');
            const formData = new FormData(form);
    
            // Mostrar indicador de carga
            const tablaProductos = document.querySelector('#products .table-wrapper');
            tablaProductos.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Cargando...</p></div>';

            // Construir URL con parámetros
            const params = new URLSearchParams(formData);
            const url = '@Url.Action("IndexProductos", "Admin")' + '?' + params.toString();

            fetch(url, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                // Crear un elemento temporal para parsear el HTML
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
        
                // Extraer solo el contenido de la pestaña de productos
                const nuevoContenidoProductos = tempDiv.querySelector('#products');
        
                if (nuevoContenidoProductos) {
                    // Reemplazar el contenido de la pestaña de productos
                    document.getElementById('products').innerHTML = nuevoContenidoProductos.innerHTML;
            
                    // Re-inicializar los event listeners
                    inicializarEventListenersProductos();
            
                    // Mantener la pestaña activa actual
                    activarPestanaActual('products');
                }
            })
            .catch(error => {
                console.error('Error al filtrar productos:', error);
                mostrarMensajeError('Error al aplicar los filtros');
            });
        }

        // Función para mantener la pestaña activa
        function activarPestanaActual(pestanaId) {
            // Remover clase active de todos los tabs y contenidos
            document.querySelectorAll('.nav-link').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-pane').forEach(content => content.classList.remove('show', 'active'));
    
            // Activar la pestaña y contenido deseado
            document.querySelector(`[data-bs-target="#${pestanaId}"]`).classList.add('active');
            document.getElementById(pestanaId).classList.add('show', 'active');
        }

        // Función para inicializar event listeners después de AJAX
        function inicializarEventListenersProductos() {
            // Re-asignar event listeners a los nuevos elementos
            document.querySelector('select[name="categoriaFiltro"]')?.addEventListener('change', function() {
                filtrarProductosAJAX();
            });

            document.querySelector('#filtrosProductosForm input[name="busqueda"]')?.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    filtrarProductosAJAX();
                }
            });

            document.querySelector('#filtrosProductosForm button[type="submit"]')?.addEventListener('click', function(e) {
                e.preventDefault();
                filtrarProductosAJAX();
            });

            // También para el botón de limpiar (modificado para AJAX)
            const btnLimpiar = document.querySelector('#filtrosProductosForm .btn-outline-secondary');
            if (btnLimpiar) {
                btnLimpiar.addEventListener('click', function(e) {
                    e.preventDefault();
                    limpiarFiltrosProductosAJAX();
                });
            }
        }

        // Función para limpiar filtros con AJAX
        function limpiarFiltrosProductosAJAX() {
            const url = '@Url.Action("LimpiarFiltrosProductos", "Admin")';
    
            // Mostrar indicador de carga
            const tablaProductos = document.querySelector('#products .table-wrapper');
            tablaProductos.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Cargando...</p></div>';

            fetch(url, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                const nuevoContenidoProductos = tempDiv.querySelector('#products');
        
                if (nuevoContenidoProductos) {
                    document.getElementById('products').innerHTML = nuevoContenidoProductos.innerHTML;
                    inicializarEventListenersProductos();
                    activarPestanaActual('products');
                }
            })
            .catch(error => {
                console.error('Error al limpiar filtros:', error);
                mostrarMensajeError('Error al limpiar los filtros');
            });
        }

        function configurarSubmitFormProducto(accion) {
            const form = document.getElementById('productoForm');
    
            if (!form) {
                console.error('Formulario producto no encontrado');
                return;
            }

            console.log('Configurando submit producto para acción:', accion);

            // Remover event listeners previos para evitar duplicados
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);

            newForm.addEventListener('submit', function(e) {
                e.preventDefault();
                e.stopPropagation();

                console.log('Submit del formulario producto para acción:', accion);

                // Limpiar errores previos
                limpiarErroresProducto();

                // Validación manual del frontend
                let isValid = true;

                const nombre = document.getElementById('Nombre')?.value || '';
                const precio = document.getElementById('Precio')?.value || '';
                const stockMinimo = document.getElementById('StockMinimo')?.value || '';

                if (!nombre || nombre.trim().length === 0) {
                    mostrarErrorProducto('Nombre', 'El nombre del producto es requerido');
                    isValid = false;
                }

                if (!precio || parseFloat(precio) <= 0) {
                    mostrarErrorProducto('Precio', 'El precio debe ser mayor a 0');
                    isValid = false;
                }

                if (!stockMinimo || parseInt(stockMinimo) < 0) {
                    mostrarErrorProducto('StockMinimo', 'El stock mínimo no puede ser negativo');
                    isValid = false;
                }

                if (!isValid) {
                    console.log('Validación frontend producto fallida');
                    return false;
                }

                // Crear FormData
                const formData = new FormData(newForm);

                // Debug: mostrar datos que se enviarán
                console.log('Datos producto a enviar:');
                for (let [key, value] of formData.entries()) {
                    console.log(key + ': ' + value);
                }

                // Enviar la solicitud
                const url = '@Url.Action("GuardarProducto", "Admin")';
                console.log('Enviando producto a:', url);

                fetch(url, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    console.log('Respuesta HTTP producto - Status:', response.status, 'OK:', response.ok);
    
                    return response.text().then(text => {
                        console.log('Respuesta producto completa recibida:', text);
    
                        try {
                            const jsonData = JSON.parse(text);
                            console.log('Parseado como JSON exitosamente:', jsonData);
                            return jsonData;
                        } catch (e) {
                            console.log('No es JSON válido, manejando como texto/HTML');
                    
                            if (response.status === 400) {
                                return {
                                    success: false,
                                    message: 'Error de validación en el servidor',
                                    errors: ['Por favor verifique que todos los campos sean correctos'],
                                    fieldErrors: {}
                                };
                            }
                    
                            if (!response.ok) {
                                return {
                                    success: false,
                                    message: `Error del servidor: ${response.status}`,
                                    errors: [text.substring(0, 200)],
                                    fieldErrors: {}
                                };
                            }
                    
                            return {
                                success: false,
                                message: 'Respuesta inesperada del servidor',
                                errors: [text],
                                fieldErrors: {}
                            };
                        }
                    });
                })
                .then(result => {
                    if (!result) return;

                    console.log('Resultado producto procesado:', result);

                    if (result.success) {
                        mostrarMensajeExito(result.message);
                
                        setTimeout(() => {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('productoModal'));
                            if (modal) modal.hide();
                            window.location.reload();
                        }, 1500);
                    } else {
                        console.log('Mostrando errores producto:', result.errors, result.fieldErrors);
                        if (result.errors || result.fieldErrors) {
                            mostrarErroresEnFormularioProducto(result.errors || [], result.fieldErrors || null);
                        } else {
                            mostrarErrorGeneralProducto(result.message || 'Error desconocido');
                        }
                    }
                })
                .catch(err => {
                    console.error('Error en fetch producto:', err);
                    mostrarErrorGeneralProducto('Error de conexión: ' + err.message);
                });
            });
        }

        // Funciones específicas para manejo de errores en productos
        function mostrarErroresEnFormularioProducto(errors, fieldErrors = null) {
            console.log('Mostrando errores producto:', errors, fieldErrors);
            
            limpiarErroresProducto();
            
            if (fieldErrors) {
                Object.keys(fieldErrors).forEach(field => {
                    const errorMessage = fieldErrors[field];
                    mostrarErrorProducto(field, errorMessage);
                });
            }
            
            if (errors && errors.length > 0) {
                errors.forEach(error => {
                    const alreadyHandled = fieldErrors && Object.values(fieldErrors).includes(error);
                    if (!alreadyHandled) {
                        let fieldName = determinarCampoPorErrorProducto(error);
                        if (fieldName) {
                            mostrarErrorProducto(fieldName, error);
                        } else {
                            mostrarErrorGeneralProducto(error);
                        }
                    }
                });
            }
        }

        function determinarCampoPorErrorProducto(error) {
            const errorLower = error.toLowerCase();
            
            if (errorLower.includes('nombre')) {
                return 'Nombre';
            } else if (errorLower.includes('descripcion')) {
                return 'Descripcion';
            } else if (errorLower.includes('precio')) {
                return 'Precio';
            } else if (errorLower.includes('stock')) {
                return 'StockMinimo';
            } else if (errorLower.includes('categoría') || errorLower.includes('categoria')) {
                return 'Id_Categoria';
            }
            
            return null;
        }

        function mostrarErrorProducto(campo, mensaje) {
            let input = document.querySelector(`[name="${campo}"]`) || document.getElementById(campo);
            
            if (!input) {
                const allInputs = document.querySelectorAll('input, select, textarea');
                input = Array.from(allInputs).find(el => 
                    el.name && el.name.toLowerCase() === campo.toLowerCase()
                );
            }
            
            if (input) {
                const formGroup = input.closest('.form-group');
                
                if (formGroup) {
                    const errorExistente = formGroup.querySelector('.text-danger.field-validation-error');
                    if (errorExistente) {
                        errorExistente.remove();
                    }
                    
                    const errorElement = document.createElement('span');
                    errorElement.className = 'text-danger field-validation-error';
                    errorElement.style.display = 'block';
                    errorElement.style.marginTop = '5px';
                    errorElement.style.fontSize = '0.875rem';
                    errorElement.textContent = mensaje;
                    
                    input.classList.add('is-invalid');
                    formGroup.appendChild(errorElement);
                }
            } else {
                mostrarErrorGeneralProducto(`Error en ${campo}: ${mensaje}`);
            }
        }

        function mostrarErrorGeneralProducto(mensaje) {
            let errorContainer = document.getElementById('errorGeneralProducto');
            if (!errorContainer) {
                errorContainer = document.createElement('div');
                errorContainer.id = 'errorGeneralProducto';
                errorContainer.className = 'alert alert-danger alert-dismissible fade show';
                errorContainer.innerHTML = `
                    <i class="lni lni-warning me-2"></i>
                    ${mensaje}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
        
                const modalHeader = document.querySelector('#productoModal .modal-header');
                if (modalHeader) {
                    modalHeader.parentNode.insertBefore(errorContainer, modalHeader.nextSibling);
                }
            } else {
                errorContainer.innerHTML = `
                    <i class="lni lni-warning me-2"></i>
                    ${mensaje}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                errorContainer.classList.remove('d-none');
            }
        }

        function limpiarErroresProducto() {
            // Limpiar clases de error en inputs del modal producto
            const productoModal = document.getElementById('productoModal');
            if (productoModal) {
                productoModal.querySelectorAll('.is-invalid').forEach(input => {
                    input.classList.remove('is-invalid');
                });
                
                productoModal.querySelectorAll('.field-validation-error').forEach(error => {
                    error.remove();
                });
            }
            
            // Limpiar error general producto
            const errorGeneral = document.getElementById('errorGeneralProducto');
            if (errorGeneral) {
                errorGeneral.remove();
            }
        }

        // Función para confirmar eliminación de producto
        function confirmarEliminacionProducto(productoId, productoNombre) {
            const busqueda = '@Html.Raw(productosResponse.Busqueda)';
            const categoriaFiltro = '@productosResponse.CategoriaFiltro';
            const pagina = '@productosResponse.PaginaActual';
        
            if (confirm(`¿Está seguro de que desea eliminar el producto "${productoNombre}"?`)) {
                let url = '@Url.Action("EliminarProducto", "Admin")' + 
                         `?id=${productoId}` +
                         `&busqueda=${encodeURIComponent(busqueda)}` +
                         `&categoriaFiltro=${categoriaFiltro}` +
                         `&pagina=${pagina}`;
            
                window.location.href = url;
            }
        }

        // Cerrar modal de productos y limpiar
        document.addEventListener('hidden.bs.modal', function (e) {
            if (e.target.id === 'productoModal') {
                document.getElementById('modalContainerProductos').innerHTML = '';
            }
        });

        function mostrarMensajeError(mensaje) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3';
            alertDiv.style.zIndex = '9999';
            alertDiv.innerHTML = `
                <i class="lni lni-warning me-2"></i>
                ${mensaje}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
    
            document.body.appendChild(alertDiv);
    
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

    </script>
}
<!-- ========== table components end ========== -->






