@model VentaFacil.web.Models.Dto.UsuarioDto
@{
    var accionModal = ViewBag.AccionModal as string;
    var roles = ViewBag.Roles as IEnumerable<SelectListItem> ?? new List<SelectListItem>();
}

<div class="modal fade" id="usuarioModal" tabindex="-1" aria-labelledby="usuarioModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="usuarioModalLabel">
                    @if (ViewBag.AccionModal == "crear")
                    {
                        <text>Crear Usuario</text>
                    }
                    else if (ViewBag.AccionModal == "editar")
                    {
                        <text>Editar Usuario</text>
                    }
                    else
                    {
                        <text>Ver Usuario</text>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            @using (Html.BeginForm("GuardarUsuario", "Admin", FormMethod.Post, new { @class = "row g-4", id = "usuarioForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    <!-- Campo ID (oculto) -->
                    @Html.HiddenFor(m => m.Id_Usr)

                    <div class="col-md-6">
                        <div class="form-outline">
                            @Html.TextBoxFor(m => m.Nombre, new {
                                @class = "form-control",
                                placeholder = "Ingrese el nombre completo",
                                required = "required",
                                @readonly = (ViewBag.AccionModal == "ver") ? "readonly" : null
                            })
                            @Html.LabelFor(m => m.Nombre, new { @class = "form-label" })
                            @Html.ValidationMessageFor(m => m.Nombre, null, new { @class = "invalid-feedback" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-outline">
                            @Html.TextBoxFor(m => m.Correo, new {
                                @class = "form-control",
                                type = "email",
                                placeholder = "ejemplo@correo.com",
                                required = "required",
                                @readonly = (ViewBag.AccionModal == "ver") ? "readonly" : null
                            })
                            @Html.LabelFor(m => m.Correo, new { @class = "form-label" })
                            @Html.ValidationMessageFor(m => m.Correo, null, new { @class = "invalid-feedback" })
                        </div>
                    </div>

                    @if (ViewBag.AccionModal == "crear" || ViewBag.AccionModal == "editar")
                    {
                        <div class="col-md-6" id="contrasenaField">
                            <div class="form-outline">
                                @Html.PasswordFor(m => m.Contrasena, new {
                                    @class = "form-control",
                                    placeholder = (ViewBag.AccionModal == "crear") ? "Ingrese la contraseña" : "Dejar en blanco para mantener actual",
                                    id = "Contrasena",
                                    minlength = (ViewBag.AccionModal == "crear") ? "6" : "0",
                                    required = (ViewBag.AccionModal == "crear") ? "required" : null
                                })
                                @Html.LabelFor(m => m.Contrasena, new { @class = "form-label" })
                                <div class="form-text text-muted">
                                    @if (ViewBag.AccionModal == "crear")
                                    {
                                        <text>Mínimo 6 caracteres</text>
                                    }
                                    else
                                    {
                                        <text>Complete solo si desea cambiar la contraseña</text>
                                    }
                                </div>
                                @Html.ValidationMessageFor(m => m.Contrasena, null, new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <div class="col-md-6" id="confirmarContrasenaField">
                            <div class="form-outline">
                                @Html.PasswordFor(m => m.ConfirmarContrasena, new {
                                    @class = "form-control",
                                    placeholder = (ViewBag.AccionModal == "crear") ? "Confirme la contraseña" : "Confirmar nueva contraseña",
                                    id = "ConfirmarContrasena",
                                    required = (ViewBag.AccionModal == "crear") ? "required" : null
                                })
                                @Html.LabelFor(m => m.ConfirmarContrasena, new { @class = "form-label" })
                                @Html.ValidationMessageFor(m => m.ConfirmarContrasena, null, new { @class = "invalid-feedback" })
                            </div>
                        </div>
                    }

                    <div class="col-md-6">
                        <div class="form-outline">
                            @Html.DropDownListFor(m => m.Rol,
                                new SelectList(ViewBag.Roles ?? new List<SelectListItem>(), "Value", "Text"),
                                "Seleccione un rol",
                                new { 
                                    @class = "form-select", 
                                    required = "required",
                                    @disabled = (ViewBag.AccionModal == "ver") ? "disabled" : null
                                }
                            )
                            @Html.LabelFor(m => m.Rol, new { @class = "form-label" })
                            @Html.ValidationMessageFor(m => m.Rol, null, new { @class = "invalid-feedback" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-check form-switch mt-4">
                            @Html.CheckBoxFor(m => m.Estado, new { 
                                @class = "form-check-input",
                                @disabled = (ViewBag.AccionModal == "ver") ? "disabled" : null
                            })
                            @Html.LabelFor(m => m.Estado, "Usuario Activo", new { @class = "form-check-label" })
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancelar</button>
                    
                    @if (ViewBag.AccionModal == "crear" || ViewBag.AccionModal == "editar")
                    {
                        <button type="submit" class="btn btn-primary" id="btnGuardarUsuario">Guardar</button>
                    }
                    
                    @if (ViewBag.AccionModal == "ver")
                    {
                        @Html.ActionLink("Editar", "IndexUsuarios", "Admin", 
                            new { pagina = ViewBag.PaginaActual, usuarioId = Model.Id_Usr, accion = "editar" }, 
                            new { @class = "btn btn-warning" })
                    }
                </div>

                <input type="hidden" name="busqueda" value="@ViewBag.BusquedaActual" />
                <input type="hidden" name="rolFiltro" value="@ViewBag.RolFiltroActual" />
                <input type="hidden" name="pagina" value="@ViewBag.PaginaActual" />
            }
        </div>
    </div>
</div>


@if (ViewBag.AccionModal == "crear" || ViewBag.AccionModal == "editar")
{
    <div class="col-md-6" id="contrasenaField">
        <div class="form-outline">
            @Html.PasswordFor(m => m.Contrasena, new {
                @class = "form-control",
                placeholder = (ViewBag.AccionModal == "crear") ? "Ingrese la contraseña" : "Dejar en blanco para mantener actual",
                id = "Contrasena",
                minlength = (ViewBag.AccionModal == "crear") ? "6" : "0",
                required = (ViewBag.AccionModal == "crear") ? "required" : null
            })
            @Html.LabelFor(m => m.Contrasena, new { @class = "form-label" })
            <div class="form-text text-muted">
                @if (ViewBag.AccionModal == "crear")
                {
                    <text>Mínimo 6 caracteres</text>
                }
                else
                {
                    <text>Complete solo si desea cambiar la contraseña</text>
                }
            </div>
            @Html.ValidationMessageFor(m => m.Contrasena, null, new { @class = "invalid-feedback" })
        </div>
    </div>

    <div class="col-md-6" id="confirmarContrasenaField">
        <div class="form-outline">
            @Html.PasswordFor(m => m.ConfirmarContrasena, new {
                @class = "form-control",
                placeholder = (ViewBag.AccionModal == "crear") ? "Confirme la contraseña" : "Confirmar nueva contraseña",
                id = "ConfirmarContrasena",
                required = (ViewBag.AccionModal == "crear") ? "required" : null
            })
            @Html.LabelFor(m => m.ConfirmarContrasena, new { @class = "form-label" })
            @Html.ValidationMessageFor(m => m.ConfirmarContrasena, null, new { @class = "invalid-feedback" })
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Configurar campos según la acción
            const accion = '@ViewBag.AccionModal';
            
            if (accion === 'editar') {
                // Remover atributos required para edición
                $('#Contrasena').removeAttr('required');
                $('#ConfirmarContrasena').removeAttr('required');
                
                // Limpiar campos al cargar
                $('#Contrasena').val('');
                $('#ConfirmarContrasena').val('');
            }

            // Validación del formulario
            $('#usuarioForm').on('submit', function(e) {
                const contrasena = $('#Contrasena').val();
                const confirmarContrasena = $('#ConfirmarContrasena').val();
                const accion = '@ViewBag.AccionModal';
                
                // Validaciones específicas por acción
                if (accion === 'crear') {
                    // En creación, contraseña es obligatoria
                    if (!contrasena || contrasena.length < 6) {
                        e.preventDefault();
                        alert('La contraseña debe tener al menos 6 caracteres');
                        return false;
                    }
                    
                    if (contrasena !== confirmarContrasena) {
                        e.preventDefault();
                        alert('Las contraseñas no coinciden');
                        return false;
                    }
                } 
                else if (accion === 'editar') {
                    // En edición, solo validar si se ingresó alguna contraseña
                    if (contrasena || confirmarContrasena) {
                        if (contrasena.length < 6) {
                            e.preventDefault();
                            alert('La contraseña debe tener al menos 6 caracteres');
                            return false;
                        }
                        
                        if (contrasena !== confirmarContrasena) {
                            e.preventDefault();
                            alert('Las contraseñas no coinciden');
                            return false;
                        }
                    }
                }
            });

            // Limpiar validación cuando los campos se modifiquen
            $('#Contrasena, #ConfirmarContrasena').on('input', function() {
                $(this).removeClass('is-invalid');
                $(this).next('.invalid-feedback').hide();
            });
        });
    </script>
}